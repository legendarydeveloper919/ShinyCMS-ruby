# CircleCI config, for https://circleci.com/gh/denny/ShinyCMS-ruby

version: 2

working_directory: ~/ShinyCMS

jobs:
  setup:
    docker:
      - image: circleci/ruby:2.6.5-node
        environment:
        - BUNDLE_PATH=vendor/bundle

    steps:
      - checkout

      # Restore Ruby dependencies from cache, or install them
      - restore_cache:
          keys:
          - bundler-cache-{{ checksum "Gemfile.lock" }}
          - bundler-cache-
      - run:
          name: Install Ruby gems
          command: |
            gem install bundler
            bundle check || \
              bundle install --without-development --jobs=4 --retry=3
      - save_cache:
          key: bundler-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Restore Node dependencies from cache, or install them
      - restore_cache:
          keys:
            - yarn-cache-{{ checksum "yarn.lock" }}
            - yarn-cache-
      - run:
          name: Install Node modules
          command: yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          key: yarn-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      # Restore Webpacker assets from cache, or compile them
      - restore_cache:
          keys:
            - webpacker-cache-{{ .Revision }}
            - webpacker-cache-
      - run:
          name: Compile webpacker assets
          command: bundle exec rake webpacker:compile
      - save_cache:
          key: webpacker-cache-{{ .Revision }}
          paths:
            - public/packs-test/

  # Test phase
  test:
    docker:
      - image: circleci/ruby:2.6.5-node
        environment:
          DATABASE_URL=postgres://shinyuser:shinypass@127.0.0.1:5432/shinycms_test
          NODE_ENV=test
          RAILS_ENV=test

      - image: circleci/postgres:10-ram
        environment:
          POSTGRES_DB=shinycms_test
          POSTGRES_USER=shinyuser
          POSTGRES_PASSWORD=shinypass

    parallelism: 2

    steps:
      - checkout

      # Database setup
      - run:
          name: Load database schema
          command: bundle exec rake db:schema:load
      - run:
          name: Load system data (Capabilities, Feature Flags, etc)
          command: bundle exec rake db:seed

      # Run tests!
      - run:
          name: Run tests
          command: |
            mkdir test-results
            mkdir test-results/rspec
            TEST_FILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec $TEST_FILES \
              --format RspecJunitFormatter \
              --out test-results/rspec/rspec.xml \
              --format progress

      # Collect test reports for CodeCov
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: test-results

# Tie it all together with a workflow
workflows:
  version: 2
  setup_and_test:
    jobs:
    - setup
    - test:
        requires:
        - setup
